# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest


from flask import Flask, render_template, request, jsonify
from surprise import SVD, Dataset, Reader
app = Flask(__name__)

# 加载数据
movies = pd.read_csv("/Users/jasurjurat/Downloads/ml-32m/movies.csv")
ratings = pd.read_csv("/Users/jasurjurat/Downloads/ml-32m/ratings.csv")

# 数据处理和推荐模型初始化
ratings_sampled = ratings.sample(frac=1 / 3, random_state=42)
reader = Reader(rating_scale=(0.5, 5.0))
data = Dataset.load_from_df(ratings_sampled[['userId', 'movieId', 'rating']], reader)
trainset = data.build_full_trainset()

algo = SVD()
algo.fit(trainset)


# 定义路由
@app.route('/')
def index():
    return render_template('index.html')


@app.route('/recommend', methods=['GET'])
def recommend():
    user_id = int(request.args.get('user_id'))
    user_rated_movies = ratings_sampled[ratings_sampled['userId'] == user_id]['movieId'].tolist()
    all_movies = set(movies['movieId'])
    unrated_movies = list(all_movies - set(user_rated_movies))

    # 生成推荐
    recommendations = [(movie, algo.predict(user_id, movie).est) for movie in unrated_movies]
    recommendations = sorted(recommendations, key=lambda x: x[1], reverse=True)[:10]
    recommended_movies = movies[movies['movieId'].isin([rec[0] for rec in recommendations])]

    return jsonify(recommended_movies[['title', 'genres']].to_dict(orient='records'))


if __name__ == '__main__':
    app.run(debug=True)

